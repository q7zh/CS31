
1. int appendToAll(string a[], int n, string value)
string g[4] = { "bernie", "hillary", "jeb", "carly" }; 
assert(appendToAll(g, -1, "w") == -1);               // when n is negative
assert(appendToAll(g, 4, "?") == 4 && g[0] == "bernie?" && g[3] == "carly?");
assert(appendToAll(g, 3, "1") == 3 && g[0] == "bernie?1" && g[2] == "jeb?1" && g[3] == "carly?");  // when the the interested number of elements is less than the total number of elemnets in the array

string people[5] = { "hillary", "jeb", "rand", "ben", "john" };
assert(appendToAll(people, 5, "!!!") == 5 && people[0] == "hillary!!!" && people[4] == "john!!!");

2. int lookup(const string a[], int n, string target) 
string h[7] = { "bernie", "hillary", "donald", "jeb", "", "carly", "ben" };
assert(lookup(h, 7, "carly") == 5);
assert(lookup(h, 7, "donald") == 2);
assert(lookup(h, 2, "donald") == -1);   // no match
assert(lookup(h, -2, "carly") == -1);     // n is negative

3.int positionOfMax(const string a[], int n) 
string h[7] = { "bernie", "hillary", "donald", "jeb", "", "carly", "ben" };
assert(positionOfMax(h, 7) == 3);
assert(positionOfMax(h, -1) == -1);   // n is negative
assert(positionOfMax(h, 0) == -1);    // n is 0

4. int rotateLeft(string a[], int n, int pos)
string g[4] = { "bernie", "hillary", "jeb", "carly" };
assert(rotateLeft(g, -3, 1) == -1);      // n is negative
assert(rotateLeft(g, 4, 1) == 1 && g[1] == "jeb?1" && g[3] == "hillary?1");

string running[5] = { "carly", "mike", "ted", "bernie", "jeb" };
assert(rotateLeft(running, 5, 1) == 1 && running[0] == "carly" && running[1] == "ted" && running[4] == "mike");

5. int countRuns(const string a[], int n) 
string d[5] = { "hillary", "hillary", "hillary", "ben", "ben" };
assert(countRuns(d, 5) == 2);
assert(countRuns(d, -4) == -1);         // n is negative
assert(countRuns(d, 0) == 0);		// n is 0

6. int flip(string a[], int n) 
string f[3] = { "jeb", "donald", "marco" };
assert(flip(f, 3) == 3 && f[0] == "marco" && f[2] == "jeb");

string folks[6] = { "chris", "marco", "", "ben", "donald", "john" }; 
assert(flip(folks, 4) == 4 && folks[0] == "ben" && folks[1] == "" && folks[3] == "chris" && folks[5] == "john");

7. int differ(const string a1[], int n1, const string a2[], int n2) 
string h[7] = { "bernie", "hillary", "donald", "jeb", "", "carly", "ben" }; 
string g[4] = { "bernie", "hillary", "jeb", "carly" };
assert(differ(h, 4, g, 4) == 2);

string folks[6] = { "chris", "marco", "", "ben", "donald", "john" };
string group[5] = { "chris", "marco", "john", "", "carly" };
assert(differ(folks, 6, group, 5) == 2);
assert(differ(folks, 2, group, 1) == 1);

8.int subsequence(const string a1[], int n1, const string a2[], int n2)
string names[10] = { "ted", "hillary", "rand", "bernie", "mike", "jeb" };
string names1[10] = { "hillary", "rand", "bernie" };
string names2[10] = { "ted", "bernie" };
assert(subsequence(names, 6, names1, 3) == 1);
assert(subsequence(names, 5, names2, 2) == -1);

9. int lookupAny(const string a1[], int n1, const string a2[], int n2)
string set1[10] = { "carly", "mike", "bernie", "hillary" };
string set2[10] = { "ben", "donald" };
assert(lookupAny(names, 6, set1, 4) == 1);
assert(lookupAny(names, 6, set2, 2) == -1);

10.int split(string a[], int n, string splitter)
string cand[6] = { "bernie", "hillary", "donald", "marco", "carly", "ben" };
assert(split(cand, 6, "chris") == 3);

string cand2[4] = { "donald", "hillary", "jeb", "ben" };
assert(split(cand2, 4, "donald") == 1);

string h[7] = { "bernie", "hillary", "donald", "jeb", "", "carly", "ben" }; 
assert(split(h, 7, "carly") == 3);
assert(split(h, 7, "donald") == 4 );
